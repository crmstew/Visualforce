<apex:page standardController="Account" renderAs="pdf" applyBodyTag="false">
<head>
<style>
body { font-family: 'Arial Unicode MS'; }
.companyName { font: bold 30px; color: red; }
</style>
</head>
<body>
<center>
<h1>New Account Name!</h1>
<apex:panelGrid columns="1" width="100%">
<apex:outputText value="{!account.Name}" styleClass="companyName"/>
<apex:outputText value="{!NOW()}"></apex:outputText>
</apex:panelGrid>
</center>
</body>
</apex:page>


<!-- Add a Save as PDF Feature to a Visualforce Page --> 
<!--Dynamically toggle between rendering the page as HTML or as a PDF file -->
<!-- VF File -->
<apex:page showHeader="false" standardStylesheets="false"
standardController="Account" extensions="SaveAsPdfExtension"
contentType="{! renderedContentType }" renderAs="{! renderingService }">
<!--
This page must be called with an Account ID in the URL, e.g.:
https://<salesforceInstance>/apex/AccountContactsPdf?id=001D000000JRBet
-->
<apex:form rendered="{! renderingService != 'PDF' }"
style="text-align: right; margin: 10px;">
<apex:commandLink action="{! saveToPdf }" value="Save to PDF">
<apex:param assignTo="{! renderedFileName }" value="Contact-List.pdf"/>
</apex:commandLink>
<hr/>
</apex:form>
<h1>Contacts for {! Account.Name}</h1>
<apex:dataTable value="{! Account.Contacts }" var="contact">
<apex:column headerValue="Name" value="{! contact.Name }"/>
<apex:column headerValue="Title" value="{! contact.Title }"/>
<apex:column headerValue="Phone" value="{! contact.Phone }"/>
<apex:column headerValue="Email" value="{! contact.Email }"/>
</apex:dataTable>
<hr/>
<!-- A little bit of info about the page's rendering;
see how it changes when saved as a PDF. -->
contentType: <apex:outputText value=" {! renderedContentType }"/><br/>
renderingService: <apex:outputText value=" {! renderingService }"/><br/>
</apex:page>

<!-- Apex Class -->
public class SaveAsPdfExtension {
// Required extension constructor (empty, no-op)
public SaveAsPDFExtension(ApexPages.StandardController controller) {}
// Determines what kind of rendering to use for the page request
public String renderingService { get; private set; }
// Allow the page to set the PDF file name
public String renderedFileName {
get;
set { renderedFileName = this.sanitizeFileName(value); }
}
// Rendered content MIME type, used to affect HTTP response
public String renderedContentType {
get {
String renderedContentType = 'text/html'; // the default
if( ! this.renderingAsHtml() ) {
// Provides a MIME type for a PDF document
renderedContentType = 'application/pdf';
// Add a file name for the PDF file
if( this.renderedFileName != null) {
// This is supposed to set the file name, but it doesn't work
renderedContentType += '#' + this.renderedFileName;
// This is a work-around to set the file name
ApexPages.currentPage().getHeaders().put(
'content-disposition', 'attachment; filename=' +
this.renderedFileName);
}
}
return renderedContentType;
}
}
// Are we rendering to HTML or PDF?
public Boolean renderingAsHtml() {
return ( (renderingService == null) ||
( ! renderingService.startsWith('PDF')) );
}
// Action method to save (or "print") to PDF
public PageReference saveToPdf() {
renderingService = 'PDF';
return null;
}
// Private helper -- basic, conservative santization
private String sanitizeFileName(String unsafeName) {
String allowedCharacters = '0-9a-zA-Z-_.';
String sanitizedName =
unsafeName.replaceAll('[^' + allowedCharacters + ']', '');
// You might also want to check filename length,
// that the filename ends in '.pdf', etc.
return(sanitizedName);
}
}

